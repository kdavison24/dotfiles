### Get os name via uname ###
typeset myos=$(uname)
#echo "myos is $myos"

if [[ -f /etc/redhat-release ]]
then
   lindist="redhat"
elif [[ -f /etc/SuSE-release ]]
then
   lindist="suse"
fi

if [[ "$lindist" == "redhat" ]]
then
	# commands specific to redhat should go here
	ncc='nc'
fi

if [[ "$lindist" == "suse" ]]
then
	# commands specific to suse should go here
	ncc='netcat'
fi

############### LINUX SPECIFIC COMMANDS #################################################

linux_cmds() {

## Finds what distro you are running
# See https://coderwall.com/p/vpx-qq for a list of strings that can be used

getDistroInfo () {
SYSTEM=$(uname -a | awk '{print $1}')
if [ $SYSTEM = "Linux" ] ; then
  if [ "$(which lsb_release)" ] ; then
    DISTRO=$(lsb_release -si)
  elif [ -f /etc/issue.net ] ; then
    DISTRO=$(head -1 /etc/issue.net | sed 's/\([a-zA-Z]*\)\([0-9].*\)/\1/g' | sed 's/release//')
  else
    echo "Could not find Linux distro"
  fi
fi
}

# Get it All #
# bring out the #
alias gim="echo ""; echo 'DISK:';df  -Pl | grep -v 'Filesystem' | awk '{print \$5,i\$6}' ; echo "";echo 'MEM:' ; free -mt | awk '{ print \$1,\$2,\$3,\$4 }'; echo ""; echo 'CPU:'; top -b -d1 -n1 | grep Cpu |  awk '{print \$2,\$3,\$4,\$5,\$6,\$7,\$8,\$9}'; echo ""; echo 'LOAD:'; cat /proc/loadavg"

# Some rpm commands
alias rpm-gpg-keys="rpm -q gpg-pubkey --qf '%{name}-%{version}-%{release} --> %{summary}\n'"

# display all rules #
alias iptlist='sudo /sbin/iptables -L -n -v --line-numbers'
alias iptlistin='sudo /sbin/iptables -L INPUT -n -v --line-numbers'
alias iptlistout='sudo /sbin/iptables -L OUTPUT -n -v --line-numbers'
alias iptlistfw='sudo /sbin/iptables -L FORWARD -n -v --line-numbers'
alias firewall=iptlist

# Get raw history commands (without line numbers)
alias rawhistory='history | cut -c 8-'

# history private mode
alias private_mode='unset HISTFILE && echo -e "\033[1m[\033[0m\033[4m*\033[0m\033[1m] \033[0m\033[4mprivate mode activated.\033[0m"'

## Generate random MAC address:
#alias macaddr='$(echo $FQDN|md5sum|sed 's/^\(..\)\(..\)\(..\)\(..\)\(..\).*$/02:\1:\2:\3:\4:\5/')'
#alias macaddr='perl -e 'for ($i=0;$i<5;$i++){@m[$i]=int(rand(256));} printf "02:%X:%X:%X:%X:%X\n",@m;''

## shortcut  for iptables and pass it via sudo#
alias ipt='sudo /sbin/iptables'

# Get all MAC addresses on system
#alias getmacs="ifconfig | egrep [0-9A-Za-z]{2}\(:[0-9A-Za-z]{2}\){5} | awk '{print $1 ":[ -" $5}' ]"

# Check if processes are still running but deleted #
alias ghostproc="lsof -nP | egrep '(deleted)'"
alias ports='netstat -tulanp'

# Print open ports
alias oports="echo -e 'User:\tCommand:\tPort:\n----------------------------' && lsof -i 4 -P -n | awk '/LISTEN/ {print \$3, \$1, \$9}' | sed 's/ [a-z0-9\.\*]*:/ /' | sort -u -k 3 -n | xargs printf '%-10s %-10s %-10s\n'"

# Verbose open ports
alias voports="lsof -P -i -n"

# Print open ports without netstat or lsof
alias rawports='declare -a array=($(tail -n +2 /proc/net/tcp | cut -d":" -f"3"|cut -d" " -f"1")) && for port in ${array[@]}; do echo $((0x$port)); done'

# Check if a port is open (p)ort (p)oke #
alias pp='${ncc} -zvw 1 $1 $2'

# Port scan with Bash's built-in sockets

nmap2 () {
[[ $# -ne 1 ]] && echo "Please provide server name" && return 1

for i in {1..9000} ; do
  SERVER="$1"
  PORT=$i
  (echo  > /dev/tcp/$SERVER/$PORT) >& /dev/null &&
   echo "Port $PORT seems to be open"
done
}

# get web server headers #
alias header='curl -I'

# get server certificate expiration #
certexp () {
[[ $# -ne 1 ]] && echo "Please provide server name" && return 1
SERVER="$1"
echo | openssl s_client -connect $SERVER:443 2>/dev/null | openssl x509 -noout -dates
}

# get server certificate expiration details#
certexpd () {
[[ $# -ne 1 ]] && echo "Please provide server name" && return 1
SERVER="$1"
echo | openssl s_client -connect $SERVER:443 2>/dev/null | openssl x509 -noout -issuer -subject -dates
}

# get server certificate fingerprint #
certfin () {
[[ $# -ne 1 ]] && echo "Please provide server name" && return 1
SERVER="$1"
echo | openssl s_client -connect $SERVER:443 2>/dev/null | openssl x509 -noout -fingerprint
}

# get server certificate hash #
certhash () {
[[ $# -ne 1 ]] && echo "Please provide server name" && return 1
SERVER="$1"
echo | openssl s_client -connect $SERVER:443 2>/dev/null | openssl x509 -noout -hash
}

# get IP information
ipadrs(){ curl ipinfo.io/$1; echo "";}

# get just IP 
alias wanip='dig +short myip.opendns.com @resolver1.opendns.com'

# dmesg in human readable format
alias dmesg_h="dmesg| perl -ne 'BEGIN{$a=time()- qx!cat /proc/uptime!};s/\[(\d+)\.\d+\]/localtime($1 + $a)/e; print $_;'"

# find out if remote server supports gzip / mod_deflate or not #
alias headerc='curl -I --compress'

## pass options to free ## 
alias meminfo='free -m -l -t'
 
## get top process eating memory
alias psmem='ps auxf | sort -nr -k 4'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'
alias psmemtop='ps aux  | awk '"'"'{print $6/1024 " MB\t\t" $11}'"'"'  | sort -nr'
 
## get top process eating cpu ##
alias pscpu='ps auxf | sort -nr -k 3'
alias pscpu10='ps auxf | sort -nr -k 3 | head -10'


## get io processes in sleep ##
alias whosleeps='for x in `seq 1 1 10`; do ps -eo state,pid,cmd | grep "^D"; echo "----"; sleep 5; done'

## get full list of processes eating swap ##
#psswap() {
#	for file in /proc/*/status
#	do
#		awk '/VmSwap|Name/{printf $2 " " $3}END{ print ""}' $file
#	done | sort -k 2 -n -r | less
#}

#alias psswap="for file in /proc/*/status ; do awk '"'"'/VmSwap|Name/\{printf $2 " " $3\}END{ print }'"'"' $file; done | sort -k 2 -n -r | less"
 
# Get server cpu info ##
alias cpuinfo='lscpu'

# Get largest files in this filesystem only
alias lush='find . -mount -type f | xargs du -m | sort -r -n -k 1 | head -n 10'

# Best SSH options for X11 forwarding
alias ssh-x='ssh -c arcfour,blowfish-cbc -XC'

# Maximum ssh debugging
alias sshv='ssh -vvv -o LogLevel=DEBUG3'

# private mode for (bash) shell
alias private_mode='unset HISTFILE && echo -e "\033[1m[\033[0m\033[4m*\033[0m\033[1m] \033[0m\033[4mprivate mode activated.\033[0m"'
 
## older system use /proc/cpuinfo ##
##alias cpuinfo='less /proc/cpuinfo' ##
 
## get GPU ram on desktop / laptop## 
alias gpumeminfo='grep -i --color memory /var/log/Xorg.0.log'

alias cpgo="rsync --progress -ravz"

# A sorted summary of disk usage including hidden files and folders
#alias dush="du -hs .[^.]* * | sort -h"
alias huse="du -msx * .[^.]*  | sort -n"

# Search for process by name
psg(){ ps aux | grep -E "[${1:0:1}]${1:1}|^USER"; }

# Simple calculator
#`calc(){ bc -l <<< "$@"; }`
alias calc='python -ic "from math import *; from random import *"'

#Top Ten "time-wasters" in the proces table
alias twast="ps aux  --sort=-%cpu | grep -m 11 -v `whoami`" 

# Verbose ls command
alias LS='find -mount -maxdepth 1 -printf "%.5m %10M %#9u:%-9g %#5U:%-5G %TF_%TR %CF_%CR %AF_%AR %#15s [%Y] %p\n" 2>/dev/null'
alias LSR='find -mount -printf "%.5m %10M %#9u:%-9g %#5U:%-5G %TF_%TR %CF_%CR %AF_%AR %#15s [%Y] %p\n" 2>/dev/null'

# Create date-based tgz of current dir, runs in the background
alias tarred='( ( D=`builtin pwd`; F=$(date +$HOME/`sed "s,[/ ],#,g" <<< ${D/${HOME}/}`#-%F.tgz); tar --ignore-failed-read --transform "s,^${D%/*},`date +${D%/*}.%F`,S" -czPf "$F" "$D" &>/dev/null ) & )'

# Tail all logs in /var/log
alias logs="find /var/log -type f -exec file {} \; | grep 'text' | cut -d' ' -f1 | sed -e's/:$//g' | grep -v '[0-9]$' | xargs tail -f"

# Print ANSI 256 Colors
alias colortest="python -c \"print('\n'.join([(' '.join([('\033[38;5;' + str((i + j)) + 'm' + str((i + j)).ljust(5) + '\033[0m') if i + j < 256 else '' for j in range(10)])) for i in range(0, 256, 10)]))\""

# Goofy
alias busy='rnd_file=$(find /usr/include -type f -size +5k | sort -R | head -n 1) && vim +$((RANDOM%$(wc -l $rnd_file | cut -f1 -d" "))) $rnd_file'
alias rot13="tr a-zA-Z n-za-mN-ZA-M"
alias dateh='date --help|sed -n "/^ *%%/,/^ *%Z/p"|while read l;do F=${l/% */}; date +%$F:"|'"'"'${F//%n/ }'"'"'|${l#* }";done|sed "s/\ *|\ */|/g" |column -s "|" -t'
alias clog="egrep -wi --color 'warning|error|critical'"


# Universal Extract
extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1        ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1       ;;
            *.rar)       unrar x $1     ;;
            *.gz)        gunzip $1     ;;
            *.tar)       tar xvf $1        ;;
            *.tbz2)      tar xvjf $1      ;;
            *.tgz)       tar xvzf $1       ;;
            *.zip)       unzip $1     ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1    ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Make tarballs
# syntax is alias directory/file
mktar(){ tar cvf  "${1%%/}.tar"     "${1%%/}/"; }
mktgz(){ tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }
mktbz(){ tar cvjf "${1%%/}.tar.bz2" "${1%%/}/"; }

# Most common commands
used(){
if [ $1 ]
then
    history | awk '{print $4}' | sort | uniq -c | sort -nr | head -n $1
else
    history | awk '{print $4}' | sort | uniq -c | sort -nr | head -n 10
fi
}

# Load function
whatload () {
	while sleep 1
	do 
	if [ $(echo "$(cat /proc/loadavg | cut -d' ' -f1) > "$@" " | bc) -gt 0 ]
        then 
        echo -e "\n\a"$(date)"       \e[5m"$(cat /proc/loadavg)"\e[0m"
        ps aux  --sort=-%cpu|head -n 5
        fi
done
}

if hash git 2>/dev/null
then

### GIT command aliases ###########
###
### Example work flow
### $ vim file.c
### $ gd                     # git diff
### $ ga file.c              # git add file.c
### $ gm "added feature x"   # git commit -m "added feature x"
### $ ...
### $ gp                     # git push
###

alias ga='git add'
alias gp='git push'
alias gl='git log'
alias gs='git status'
alias gd='git diff'
alias gdc='git diff --cached'
alias gm='git commit -m'
alias gma='git commit -am'
alias gb='git branch'
alias gc='git checkout'
alias gra='git remote add'
alias grr='git remote rm'
alias gpu='git pull'
alias gcl='git clone'


# Show all alias related git
galias() { alias | grep 'git' | sed "s/^\([^=]*\)=\(.*\)/\1 => \2/"| sed "s/['|\']//g" | sort; }

fi

### Docker specific aliases/functions  ###################
###

## Check if docker is installed.
## Using hash since in bash but could use "command -v docker" to be posix compliant

if hash docker 2>/dev/null
then

### Get the amount of memory each docker is using
docmem () {
	for line in `docker ps | awk '{print $1}' | grep -v CONTAINER`
	do 
		docker ps | grep $line | awk '{printf $NF" "}' && echo $(( `cat /sys/fs/cgroup/memory/docker/$line*/memory.usage_in_bytes` / 1024 / 1024 ))MB
	done
}

# Get latest container ID
alias dl="docker ps -l -q"

# Get container process
alias dps="docker ps"

# Get process included stop container
alias dpa="docker ps -a"

# Get images
alias di="docker images"

# Get container IP
alias dip="docker inspect --format '{{ .NetworkSettings.IPAddress }}'"

# Run deamonized container, e.g., $dkd base /bin/echo hello
alias dkd="docker run -d -P"

# Run interactive container, e.g., $dki base /bin/bash
alias dki="docker run -i -t -P"

# Execute interactive container, e.g., $dex base /bin/bash
alias dex="docker exec -i -t"

# Enter into a running docker
function dent {
docker exec -i -t $1 /bin/bash
}
complete -F _docker_exec dent

# run bash for any image
function dbash {
docker run --rm -i -t -e TERM=xterm --entrypoint /bin/bash $1 
}
complete -F _docker_images dbash

# Stop all containers
dstop() { docker stop $(docker ps -a -q); }

# Remove all containers
drm() { docker rm $(docker ps -a -q); }

# Stop and Remove all containers
alias drmf='docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)'

# Remove all images
dri() { docker rmi $(docker images -q); }

# Dockerfile build, e.g., $dbu tcnksm/test 
dbu() { docker build -t=$1 .; }

# Update docker images
#alias dockup="docker images | awk '(NR>1) && ($2!~/none/) {print $1":"$2}'| xargs -L1 docker pull"

# Show all alias related docker
dalias() { alias | grep 'docker' | sed "s/^\([^=]*\)=\(.*\)/\1 => \2/"| sed "s/['|\']//g" | sort; }

fi

### Elastic Search aliases/functions #####################
elsconf () {
	curl -XGET "$@":9200
}

}

############### AIX SPECIFIC COMMANDS #################################################

aix_cmds() {
# AIX commands
alias lppv='lppchk -v'

## get top process eating memory for AIX
alias psmem10='ps wgv | head -n 1; ps wwgv | egrep -v "RSS" | sort +6b -7 -n -r | head -10'

## get all processes memory information sorted
alias psmem='ps wgv | head -n 1; ps wwgv | egrep -v "RSS" | sort +6b -7 -n -r'

## get specific memory information about processes in MB
alias pstop='svmon -P -O summary=basic,unit=MB'

## Top 15 processes using memory
alias psmem15='svmon -Pt15 | perl -e "while(<>){print if($.==2||$&&&!$s++);$.=0 if(/^-+$/)}"'

## Top 10 processes using CPU
alias pscpu10='ps aux | head -1; ps aux | sort -rn +2 | head -10'

## Top 10 processes using I/O
alias psio10='ps vx | head -1; ps wvx | grep -v PID | sort -rn +4 | head -10'

## Top 10 processes using cpu time
alias pstime10='ps vx|head -1;ps wvx|grep -v PID|sort -rn +3|head -10'

## Command to extract percentage of memory really used
#alias freemem='svmon -G | egrep "^memory" | awk '{print $6/$2}''

}

############### AGNOSTIC COMMANDS #################################################

twixt() {
# Commands that work on Linux/AIX
alias dush="du -xsm * | sort -n | awk '{ printf(\"%4s MB  ./\",\$1) ; for (i=1;i<=NF;i++) { if (i>1) printf(\"%s \",\$i) } ; printf(\"\n\") }' | tail"

alias noc='grep -Ev '\''^(#|$)'\'''
alias most='du -msx * | sort -rn | head -10'

# file tree
alias tree="find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"

alias serve='python -m SimpleHTTPServer'

# sort fast 
alias sortfast='sort -S$(($(sed '\''/MemF/!d;s/[^0-9]*//g'\'' /proc/meminfo)/2048)) $([ `nproc` -gt 1 ]&&echo -n --parallel=`nproc`)'

# print appropriate string for two minute in the future for crontab to test a job quickly
crontest () { date +'%M %k %d %m *' |awk 'BEGIN {ORS="\t"} {print $1+2,$2,$3,$4,$5,$6}'; echo $1;}

# Dump tcp to file for analysis with WireShark
sharkit () { tcpdump -i "$@" -s0 -v -w /tmp/capture.pcap ;}

}


### add alias as per os using $_myos ###
case $myos in
   "Linux" )
	     linux_cmds
	     twixt
	;;
   "AIX" )
        aix_cmds
        twixt
        ;;
   FreeBSD|OpenBSD) alias foo='/path/to/bsd/bin/foo' ;;
   SunOS) alias foo='/path/to/sunos/bin/foo' ;;
   *) ;;
esac

# Archived commands
#alias ducks='du -xks * | sort -rn | while read size fname; do for unit in k M G T P E Z Y; do if [ $size -lt 1024 ]; then echo -e "${size}${unit}\t${fname}"; break; fi; size=$((size/1024)); done; done'

